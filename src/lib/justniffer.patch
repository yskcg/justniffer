diff -Naur libnids-1.21/configure.gnu libnids-1.21_patched/configure.gnu
--- libnids-1.21/configure.gnu	1970-01-01 01:00:00.000000000 +0100
+++ libnids-1.21_patched/configure.gnu	2009-05-27 23:00:03.000000000 +0200
@@ -0,0 +1,3 @@
+#!/bin/sh
+
+./configure --disable-libnet --disable-libglib "$@"
\ No newline at end of file
diff -Naur libnids-1.21/README libnids-1.21_patched/README
--- libnids-1.21/README	2006-05-04 18:24:02.000000000 +0200
+++ libnids-1.21_patched/README	2009-05-27 23:00:03.000000000 +0200
@@ -1,62 +1,5 @@
+This library is a modified version of the libnids-1.21.
+It has been modified in order to pass capture time-stamp to the original tcp callback functions.
+The original README was renamed README.original
 
-                             ====================
-                                 libnids-1.21
-                             ====================
-
-1. What is libnids ?
-------------------------
-
-	Libnids is a library that provides a functionality of one of NIDS 
-(Network Intrusion Detection System) components, namely E-component. It means 
-that libnids code watches all local network traffic, cooks received datagrams 
-a bit (quite a bit ;)), and provides convenient information on them to 
-analyzing modules of NIDS. Libnids performs:
-a) assembly of TCP segments into TCP streams
-b) IP defragmentation
-c) TCP port scan detection 
-More technical info can be found in MISC file.
-	So, if you intend to develop a custom NIDS, you don't have to build
-low-level network code. If you decide to use libnids, you have got
-E-component ready - you can focus on implementing other parts of NIDS.
-
-2. Why is libnids valuable ?
-----------------------------
-
-	On January 98, Thomas H. Ptacek and Timothy N. Newsham published an
-excellent paper entitled "Eluding Network Intrusion Detection". It's a
-must-read for all security concerned people, available from
-http://www.robertgraham.com/mirror/Ptacek-Newsham-Evasion-98.html
-In this paper one can find description of variety of attack against NIDS.
-During libnids development a lot of effort was made to make libnids immune
-to these attacks. During tests libnids performed TCP assembly and IP 
-defragmentation in exactly the same way as Linux 2.0.36 hosts
-(targets of test packets). For details, see file TESTS; here let's just 
-mention two things:
-a) libnids passed all tests implemented in fragrouter by Dug Song (see 
-   http://www.anzen.com/research/nidsbench/ ). In fact, fragrouter's tests were
-   fairly simple when compared with other, custom ones.
-b) libnids IP defragmenting module contains slightly modified Linux 2.0.36 
-   kernel source files ip_fragment.c and ip_options.c. It means that libnids IP
-   defragmentation is as reliable as one implemented in Linux 2.0.36.
-Libnids is easy to use and highly configurable - see API file for details.
-
-3. On what platform does it run ?
----------------------------------
-
-Currently libnids will compile on Linux, Solaris, any *BSD. WIN32 port is
-available at http://www.datanerds.net/~mike/libnids.html, but currently only
-obsoleted versions are present there; newer ports may appear at
-http://www.checksum.org (in "downloads" section).
-
-4. Who is allowed to use it ?
------------------------------
-
-Libnids is licensed under GPL. See the file COPYING for details.
-
-5. Contact info ?
------------------
-
-The primary libnids site is 
-http://libnids.sourceforge.net/
-Please send bug reports, comments, or questions about this software to
-<nergal@avet.com.pl>.
+Oreste Notelli
diff -Naur libnids-1.21/README.original libnids-1.21_patched/README.original
--- libnids-1.21/README.original	1970-01-01 01:00:00.000000000 +0100
+++ libnids-1.21_patched/README.original	2009-05-27 23:00:03.000000000 +0200
@@ -0,0 +1,62 @@
+
+                             ====================
+                                 libnids-1.21
+                             ====================
+
+1. What is libnids ?
+------------------------
+
+	Libnids is a library that provides a functionality of one of NIDS 
+(Network Intrusion Detection System) components, namely E-component. It means 
+that libnids code watches all local network traffic, cooks received datagrams 
+a bit (quite a bit ;)), and provides convenient information on them to 
+analyzing modules of NIDS. Libnids performs:
+a) assembly of TCP segments into TCP streams
+b) IP defragmentation
+c) TCP port scan detection 
+More technical info can be found in MISC file.
+	So, if you intend to develop a custom NIDS, you don't have to build
+low-level network code. If you decide to use libnids, you have got
+E-component ready - you can focus on implementing other parts of NIDS.
+
+2. Why is libnids valuable ?
+----------------------------
+
+	On January 98, Thomas H. Ptacek and Timothy N. Newsham published an
+excellent paper entitled "Eluding Network Intrusion Detection". It's a
+must-read for all security concerned people, available from
+http://www.robertgraham.com/mirror/Ptacek-Newsham-Evasion-98.html
+In this paper one can find description of variety of attack against NIDS.
+During libnids development a lot of effort was made to make libnids immune
+to these attacks. During tests libnids performed TCP assembly and IP 
+defragmentation in exactly the same way as Linux 2.0.36 hosts
+(targets of test packets). For details, see file TESTS; here let's just 
+mention two things:
+a) libnids passed all tests implemented in fragrouter by Dug Song (see 
+   http://www.anzen.com/research/nidsbench/ ). In fact, fragrouter's tests were
+   fairly simple when compared with other, custom ones.
+b) libnids IP defragmenting module contains slightly modified Linux 2.0.36 
+   kernel source files ip_fragment.c and ip_options.c. It means that libnids IP
+   defragmentation is as reliable as one implemented in Linux 2.0.36.
+Libnids is easy to use and highly configurable - see API file for details.
+
+3. On what platform does it run ?
+---------------------------------
+
+Currently libnids will compile on Linux, Solaris, any *BSD. WIN32 port is
+available at http://www.datanerds.net/~mike/libnids.html, but currently only
+obsoleted versions are present there; newer ports may appear at
+http://www.checksum.org (in "downloads" section).
+
+4. Who is allowed to use it ?
+-----------------------------
+
+Libnids is licensed under GPL. See the file COPYING for details.
+
+5. Contact info ?
+-----------------
+
+The primary libnids site is 
+http://libnids.sourceforge.net/
+Please send bug reports, comments, or questions about this software to
+<nergal@avet.com.pl>.
diff -Naur libnids-1.21/src/allpromisc.c libnids-1.21_patched/src/allpromisc.c
--- libnids-1.21/src/allpromisc.c	2004-07-23 12:10:39.000000000 +0200
+++ libnids-1.21_patched/src/allpromisc.c	2009-05-27 23:00:03.000000000 +0200
@@ -1,4 +1,4 @@
-#include "nids.h"
+#include "nids2.h"
 #ifdef __linux__
 #include <sys/socket.h>
 #include <netinet/in.h>
diff -Naur libnids-1.21/src/checksum.c libnids-1.21_patched/src/checksum.c
--- libnids-1.21/src/checksum.c	2005-02-08 16:46:11.000000000 +0100
+++ libnids-1.21_patched/src/checksum.c	2009-05-27 23:00:03.000000000 +0200
@@ -5,7 +5,7 @@
 #include <netinet/ip.h>
 #include <netinet/tcp.h>
 #include <netinet/udp.h>
-#include "nids.h"
+#include "nids2.h"
 
 static struct nids_chksum_ctl * nchk;
 static int nrnochksum=0;
diff -Naur libnids-1.21/src/ip_fragment.c libnids-1.21_patched/src/ip_fragment.c
--- libnids-1.21/src/ip_fragment.c	2006-05-01 18:58:48.000000000 +0200
+++ libnids-1.21_patched/src/ip_fragment.c	2009-05-27 23:00:03.000000000 +0200
@@ -18,7 +18,7 @@
 #include "ip_fragment.h"
 #include "tcp.h"
 #include "util.h"
-#include "nids.h"
+#include "nids2.h"
 
 #define IP_CE		0x8000	/* Flag: "Congestion" */
 #define IP_DF		0x4000	/* Flag: "Don't Fragment" */
diff -Naur libnids-1.21/src/killtcp.c libnids-1.21_patched/src/killtcp.c
--- libnids-1.21/src/killtcp.c	2006-05-08 22:05:51.000000000 +0200
+++ libnids-1.21_patched/src/killtcp.c	2010-09-08 15:59:14.527818972 +0200
@@ -7,7 +7,7 @@
 #include <stdlib.h>
 #include "tcp.h"
 #include "util.h"
-#include "nids.h"
+#include "nids2.h"
 #if LIBNET_VER == 0
 #include <libnet.h>
 
@@ -118,6 +118,6 @@
     if (initialized)
 	abort();
 }
-#elif
+#else
 #error Something wrong with LIBNET_VER
 #endif
diff -Naur libnids-1.21/src/libnids.c libnids-1.21_patched/src/libnids.c
--- libnids-1.21/src/libnids.c	2006-05-04 18:38:28.000000000 +0200
+++ libnids-1.21_patched/src/libnids.c	2009-05-27 23:00:03.000000000 +0200
@@ -3,7 +3,7 @@
   See the file COPYING for license details.
 */
 
-#include <config.h>
+#include "config.h"
 #include <sys/types.h>
 #include <netinet/in.h>
 #include <netinet/in_systm.h>
@@ -26,7 +26,7 @@
 #include "scan.h"
 #include "tcp.h"
 #include "util.h"
-#include "nids.h"
+#include "nids2.h"
 #ifdef HAVE_LIBGTHREAD_2_0
 #include <glib.h>
 #endif
@@ -191,11 +191,11 @@
 /* called either directly from pcap_hand() or from cap_queue_process_thread()
  * depending on the value of nids_params.multiproc - mcree
  */
-static void call_ip_frag_procs(void *data,bpf_u_int32 caplen)
+static void call_ip_frag_procs(void *data,bpf_u_int32 caplen, struct timeval* ts)
 {
     struct proc_node *i;
     for (i = ip_frag_procs; i; i = i->next)
-	(i->item) (data, caplen);
+		(i->item) (data, caplen,  ts);
 }
 
 
@@ -337,14 +337,14 @@
           g_async_queue_unlock(cap_queue);
 	}
      } else { /* user requested simple passthru - no threading */
-        call_ip_frag_procs(data_aligned,hdr->caplen - nids_linkoffset);
+        call_ip_frag_procs(data_aligned,hdr->caplen - nids_linkoffset, &hdr->ts);
      }
  #else
-     call_ip_frag_procs(data_aligned,hdr->caplen - nids_linkoffset);
+     call_ip_frag_procs(data_aligned,hdr->caplen - nids_linkoffset, &hdr->ts);
  #endif
 }
 
-static void gen_ip_frag_proc(u_char * data, int len)
+static void gen_ip_frag_proc(u_char * data, int len, struct timeval* ts)
 {
     struct proc_node *i;
     struct ip *iph = (struct ip *) data;
@@ -355,7 +355,7 @@
 
     if (!nids_params.ip_filter(iph, len))
 	return;
-
+	
     if (len < (int)sizeof(struct ip) || iph->ip_hl < 5 || iph->ip_v != 4 ||
 	ip_fast_csum((unsigned char *) iph, iph->ip_hl) != 0 ||
 	len < ntohs(iph->ip_len) || ntohs(iph->ip_len) < iph->ip_hl << 2) {
@@ -366,7 +366,8 @@
 	glibc_syslog_h_workaround(NIDS_WARN_IP, NIDS_WARN_IP_SRR, iph, 0);
 	return;
     }
-    switch (ip_defrag_stub((struct ip *) data, &iph)) {
+
+	switch (ip_defrag_stub((struct ip *) data, &iph)) {
     case IPF_ISF:
 	return;
     case IPF_NOTF:
@@ -385,7 +386,7 @@
     skblen += nids_params.sk_buff_size;
 
     for (i = ip_procs; i; i = i->next)
-	(i->item) (iph, skblen);
+	(i->item) (iph, skblen, ts);
     if (need_free)
 	free(iph);
 }
@@ -400,7 +401,7 @@
 #define UH_DPORT dest
 #endif
 
-static void process_udp(char *data)
+static void process_udp(char *data, struct timeval* ts)
 {
     struct proc_node *ipp = udp_procs;
     struct ip *iph = (struct ip *) data;
@@ -429,18 +430,19 @@
 	ipp = ipp->next;
     }
 }
-static void gen_ip_proc(u_char * data, int skblen)
+
+static void gen_ip_proc(u_char * data, int skblen, struct timeval* ts)
 {
-    switch (((struct ip *) data)->ip_p) {
+	switch (((struct ip *) data)->ip_p) {
     case IPPROTO_TCP:
-	process_tcp(data, skblen);
+	process_tcp(data, skblen,  ts);
 	break;
     case IPPROTO_UDP:
-	process_udp(data);
+	process_udp(data,  ts);
 	break;
     case IPPROTO_ICMP:
 	if (nids_params.n_tcp_streams)
-	    process_icmp(data);
+	    process_icmp(data, ts);
 	break;
     default:
 	break;
@@ -551,7 +553,7 @@
      while(1) { /* loop "forever" */
 	  qitem=g_async_queue_pop(cap_queue);
 	  if (qitem==&EOF_item) break; /* EOF item received: we should exit */
-	  call_ip_frag_procs(qitem->data,qitem->caplen);
+	  // TO FIX: Oreste. call_ip_frag_procs(qitem->data,qitem->caplen);
 	  free(qitem->data);
 	  free(qitem);
      }
diff -Naur libnids-1.21/src/Makefile.in libnids-1.21_patched/src/Makefile.in
--- libnids-1.21/src/Makefile.in	2006-05-01 19:14:51.000000000 +0200
+++ libnids-1.21_patched/src/Makefile.in	2009-05-27 23:00:03.000000000 +0200
@@ -1,5 +1,5 @@
 #
-# Makefile for libnids.
+# Makefile for libnids2.
 #
 # Dug Song <dugsong@monkey.org>
 
@@ -12,8 +12,8 @@
 includedir	= @includedir@
 libdir		= @libdir@
 mandir		= @mandir@
-LIBSTATIC      = libnids.a
-LIBSHARED      = libnids.so.1.21
+LIBSTATIC      = libnids2.a
+LIBSHARED      = libnids2.so.1.21
 
 CC		= @CC@
 CFLAGS		= @CFLAGS@ -W -Wall -DLIBNET_VER=@LIBNET_VER@ -DHAVE_ICMPHDR=@ICMPHEADER@ -DHAVE_TCP_STATES=@TCPSTATES@ -DHAVE_BSD_UDPHDR=@HAVE_BSD_UDPHDR@
@@ -71,12 +71,12 @@
 	../mkinstalldirs $(install_prefix)$(libdir)
 	../mkinstalldirs $(install_prefix)$(includedir)
 	../mkinstalldirs $(install_prefix)$(mandir)/man3
-	$(INSTALL) -c -m 644 libnids.a $(install_prefix)$(libdir)
-	$(INSTALL) -c -m 644 nids.h $(install_prefix)$(includedir)
-	$(INSTALL) -c -m 644 libnids.3 $(install_prefix)$(mandir)/man3
+	# we don't want to distribute the patched version of libnids. It is usefull just for justniffer
+	#$(INSTALL) -c -m 644 libnids2.a $(install_prefix)$(libdir)
+	#$(INSTALL) -c -m 644 nids2.h $(install_prefix)$(includedir)
 _installshared installshared: install $(LIBSHARED)
-	$(INSTALL) -c -m 755 $(LIBSHARED) $(install_prefix)$(libdir)
-	ln -s -f $(LIBSHARED) $(install_prefix)$(libdir)/libnids.so
+	#$(INSTALL) -c -m 755 $(LIBSHARED) $(install_prefix)$(libdir)
+	#ln -s -f $(LIBSHARED) $(install_prefix)$(libdir)/libnids2.so
  
 clean:
 	rm -f *.o *~ $(LIBSTATIC) $(LIBSHARED)
diff -Naur libnids-1.21/src/nids2.h libnids-1.21_patched/src/nids2.h
--- libnids-1.21/src/nids2.h	1970-01-01 01:00:00.000000000 +0100
+++ libnids-1.21_patched/src/nids2.h	2009-05-27 23:00:03.000000000 +0200
@@ -0,0 +1,181 @@
+/*
+  Copyright (c) 1999 Rafal Wojtczuk <nergal@avet.com.pl>. All rights reserved.
+  See the file COPYING for license details.
+*/
+
+#ifndef _NIDS2_NIDS2_H
+# define _NIDS2_NIDS2_H
+
+# include <sys/types.h>
+#include <netinet/in_systm.h>
+#include <netinet/in.h>
+# include <netinet/ip.h>
+# include <netinet/tcp.h>
+# include <pcap.h>
+
+# ifdef __cplusplus
+extern "C" {
+# endif
+
+# define NIDS_MAJOR 1
+# define NIDS_MINOR 20
+
+enum
+{
+  NIDS_WARN_IP = 1,
+  NIDS_WARN_TCP,
+  NIDS_WARN_UDP,
+  NIDS_WARN_SCAN
+};
+
+enum
+{
+  NIDS_WARN_UNDEFINED = 0,
+  NIDS_WARN_IP_OVERSIZED,
+  NIDS_WARN_IP_INVLIST,
+  NIDS_WARN_IP_OVERLAP,
+  NIDS_WARN_IP_HDR,
+  NIDS_WARN_IP_SRR,
+  NIDS_WARN_TCP_TOOMUCH,
+  NIDS_WARN_TCP_HDR,
+  NIDS_WARN_TCP_BIGQUEUE,
+  NIDS_WARN_TCP_BADFLAGS
+};
+
+# define NIDS_JUST_EST 1
+# define NIDS_DATA 2
+# define NIDS_CLOSE 3
+# define NIDS_RESET 4
+# define NIDS_TIMED_OUT 5
+# define NIDS_EXITING   6	/* nids is exiting; last chance to get data */
+# define NIDS_OPENING 7
+
+# define NIDS_DO_CHKSUM  0
+# define NIDS_DONT_CHKSUM 1
+
+struct tuple4
+{
+  u_short source;
+  u_short dest;
+  u_int saddr;
+  u_int daddr;
+};
+
+struct half_stream
+{
+  char state;
+  char collect;
+  char collect_urg;
+
+  char *data;
+  int offset;
+  int count;
+  int count_new;
+  int bufsize;
+  int rmem_alloc;
+
+  int urg_count;
+  u_int acked;
+  u_int seq;
+  u_int ack_seq;
+  u_int first_data_seq;
+  u_char urgdata;
+  u_char count_new_urg;
+  u_char urg_seen;
+  u_int urg_ptr;
+  u_short window;
+  u_char ts_on;
+  u_char wscale_on;
+  u_int curr_ts; 
+  u_int wscale;
+  struct skbuff *list;
+  struct skbuff *listtail;
+};
+
+struct tcp_stream
+{
+  struct tuple4 addr;
+  char nids_state;
+  struct lurker_node *listeners;
+  struct half_stream client;
+  struct half_stream server;
+  struct tcp_stream *next_node;
+  struct tcp_stream *prev_node;
+  int hash_index;
+  struct tcp_stream *next_time;
+  struct tcp_stream *prev_time;
+  int read;
+  struct tcp_stream *next_free;
+  void *user;
+};
+
+struct nids_prm
+{
+  int n_tcp_streams;
+  int n_hosts;
+  char *device;
+  char *filename;
+  int sk_buff_size;
+  int dev_addon;
+  void (*syslog) ();
+  int syslog_level;
+  int scan_num_hosts;
+  int scan_delay;
+  int scan_num_ports;
+  void (*no_mem) (char *);
+  int (*ip_filter) ();
+  char *pcap_filter;
+  int promisc;
+  int one_loop_less;
+  int pcap_timeout;
+  int multiproc;
+  int queue_limit;
+  int tcp_workarounds;
+  pcap_t *pcap_desc;
+};
+
+struct tcp_timeout
+{
+  struct tcp_stream *a_tcp;
+  struct timeval timeout;
+  struct tcp_timeout *next;
+  struct tcp_timeout *prev;
+};
+
+int nids_init (void);
+void nids_register_ip_frag (void (*));
+void nids_register_ip (void (*));
+void nids_register_tcp (void (*));
+void nids_register_udp (void (*));
+void nids_killtcp (struct tcp_stream *);
+void nids_discard (struct tcp_stream *, int);
+int nids_run (void);
+void nids_exit(void);
+int nids_getfd (void);
+int nids_dispatch (int);
+int nids_next (void);
+void nids_pcap_handler(u_char *, struct pcap_pkthdr *, u_char *);
+struct tcp_stream *nids_find_tcp_stream(struct tuple4 *);
+void nids_free_tcp_stream(struct tcp_stream *);
+
+extern struct nids_prm nids_params;
+extern char *nids_warnings[];
+extern char nids_errbuf[];
+extern struct pcap_pkthdr *nids_last_pcap_header;
+extern u_char *nids_last_pcap_data;
+extern u_int nids_linkoffset;
+extern struct tcp_timeout *nids_tcp_timeouts;
+
+struct nids_chksum_ctl {
+	u_int netaddr;
+	u_int mask;
+	u_int action;
+	u_int reserved;
+};
+extern void nids_register_chksum_ctl(struct nids_chksum_ctl *, int);
+
+# ifdef __cplusplus
+}
+# endif
+
+#endif /* _NIDS2_NIDS2_H */
diff -Naur libnids-1.21/src/nids.h libnids-1.21_patched/src/nids.h
--- libnids-1.21/src/nids.h	2006-05-08 22:05:20.000000000 +0200
+++ libnids-1.21_patched/src/nids.h	1970-01-01 01:00:00.000000000 +0100
@@ -1,180 +0,0 @@
-/*
-  Copyright (c) 1999 Rafal Wojtczuk <nergal@avet.com.pl>. All rights reserved.
-  See the file COPYING for license details.
-*/
-
-#ifndef _NIDS_NIDS_H
-# define _NIDS_NIDS_H
-
-# include <sys/types.h>
-#include <netinet/in_systm.h>
-#include <netinet/in.h>
-# include <netinet/ip.h>
-# include <netinet/tcp.h>
-# include <pcap.h>
-
-# ifdef __cplusplus
-extern "C" {
-# endif
-
-# define NIDS_MAJOR 1
-# define NIDS_MINOR 20
-
-enum
-{
-  NIDS_WARN_IP = 1,
-  NIDS_WARN_TCP,
-  NIDS_WARN_UDP,
-  NIDS_WARN_SCAN
-};
-
-enum
-{
-  NIDS_WARN_UNDEFINED = 0,
-  NIDS_WARN_IP_OVERSIZED,
-  NIDS_WARN_IP_INVLIST,
-  NIDS_WARN_IP_OVERLAP,
-  NIDS_WARN_IP_HDR,
-  NIDS_WARN_IP_SRR,
-  NIDS_WARN_TCP_TOOMUCH,
-  NIDS_WARN_TCP_HDR,
-  NIDS_WARN_TCP_BIGQUEUE,
-  NIDS_WARN_TCP_BADFLAGS
-};
-
-# define NIDS_JUST_EST 1
-# define NIDS_DATA 2
-# define NIDS_CLOSE 3
-# define NIDS_RESET 4
-# define NIDS_TIMED_OUT 5
-# define NIDS_EXITING   6	/* nids is exiting; last chance to get data */
-
-# define NIDS_DO_CHKSUM  0
-# define NIDS_DONT_CHKSUM 1
-
-struct tuple4
-{
-  u_short source;
-  u_short dest;
-  u_int saddr;
-  u_int daddr;
-};
-
-struct half_stream
-{
-  char state;
-  char collect;
-  char collect_urg;
-
-  char *data;
-  int offset;
-  int count;
-  int count_new;
-  int bufsize;
-  int rmem_alloc;
-
-  int urg_count;
-  u_int acked;
-  u_int seq;
-  u_int ack_seq;
-  u_int first_data_seq;
-  u_char urgdata;
-  u_char count_new_urg;
-  u_char urg_seen;
-  u_int urg_ptr;
-  u_short window;
-  u_char ts_on;
-  u_char wscale_on;
-  u_int curr_ts; 
-  u_int wscale;
-  struct skbuff *list;
-  struct skbuff *listtail;
-};
-
-struct tcp_stream
-{
-  struct tuple4 addr;
-  char nids_state;
-  struct lurker_node *listeners;
-  struct half_stream client;
-  struct half_stream server;
-  struct tcp_stream *next_node;
-  struct tcp_stream *prev_node;
-  int hash_index;
-  struct tcp_stream *next_time;
-  struct tcp_stream *prev_time;
-  int read;
-  struct tcp_stream *next_free;
-  void *user;
-};
-
-struct nids_prm
-{
-  int n_tcp_streams;
-  int n_hosts;
-  char *device;
-  char *filename;
-  int sk_buff_size;
-  int dev_addon;
-  void (*syslog) ();
-  int syslog_level;
-  int scan_num_hosts;
-  int scan_delay;
-  int scan_num_ports;
-  void (*no_mem) (char *);
-  int (*ip_filter) ();
-  char *pcap_filter;
-  int promisc;
-  int one_loop_less;
-  int pcap_timeout;
-  int multiproc;
-  int queue_limit;
-  int tcp_workarounds;
-  pcap_t *pcap_desc;
-};
-
-struct tcp_timeout
-{
-  struct tcp_stream *a_tcp;
-  struct timeval timeout;
-  struct tcp_timeout *next;
-  struct tcp_timeout *prev;
-};
-
-int nids_init (void);
-void nids_register_ip_frag (void (*));
-void nids_register_ip (void (*));
-void nids_register_tcp (void (*));
-void nids_register_udp (void (*));
-void nids_killtcp (struct tcp_stream *);
-void nids_discard (struct tcp_stream *, int);
-int nids_run (void);
-void nids_exit(void);
-int nids_getfd (void);
-int nids_dispatch (int);
-int nids_next (void);
-void nids_pcap_handler(u_char *, struct pcap_pkthdr *, u_char *);
-struct tcp_stream *nids_find_tcp_stream(struct tuple4 *);
-void nids_free_tcp_stream(struct tcp_stream *);
-
-extern struct nids_prm nids_params;
-extern char *nids_warnings[];
-extern char nids_errbuf[];
-extern struct pcap_pkthdr *nids_last_pcap_header;
-extern u_char *nids_last_pcap_data;
-extern u_int nids_linkoffset;
-extern struct tcp_timeout *nids_tcp_timeouts;
-
-struct nids_chksum_ctl {
-	u_int netaddr;
-	u_int mask;
-	u_int action;
-	u_int reserved;
-};
-extern void nids_register_chksum_ctl(struct nids_chksum_ctl *, int);
-
-# ifdef __cplusplus
-}
-# endif
-
-#endif /* _NIDS_NIDS_H */
diff -Naur libnids-1.21/src/scan.c libnids-1.21_patched/src/scan.c
--- libnids-1.21/src/scan.c	2006-05-01 18:58:48.000000000 +0200
+++ libnids-1.21_patched/src/scan.c	2009-05-27 23:00:03.000000000 +0200
@@ -12,7 +12,7 @@
 #include <netinet/ip.h>
 #include <netinet/tcp.h>
 
-#include "nids.h"
+#include "nids2.h"
 #include "scan.h"
 
 static struct host **hashhost;
diff -Naur libnids-1.21/src/tcp.c libnids-1.21_patched/src/tcp.c
--- libnids-1.21/src/tcp.c	2006-05-01 19:07:25.000000000 +0200
+++ libnids-1.21_patched/src/tcp.c	2009-05-27 23:00:03.000000000 +0200
@@ -18,7 +18,7 @@
 #include "scan.h"
 #include "tcp.h"
 #include "util.h"
-#include "nids.h"
+#include "nids2.h"
 #include "hash.h"
 
 #if ! HAVE_TCP_STATES
@@ -176,7 +176,7 @@
       return;
     to->a_tcp->nids_state = NIDS_TIMED_OUT;
     for (i = to->a_tcp->listeners; i; i = i->next)
-      (i->item) (to->a_tcp, &i->data);
+      (i->item) (to->a_tcp, &i->data, now, NULL);
     next = to->next;
     nids_free_tcp_stream(to->a_tcp);
   }
@@ -249,8 +249,8 @@
     
 
 
-static void
-add_new_tcp(struct tcphdr * this_tcphdr, struct ip * this_iphdr)
+static struct tcp_stream*
+add_new_tcp(struct tcphdr * this_tcphdr, struct ip * this_iphdr, const struct timeval* ts, void* data)
 {
   struct tcp_stream *tolink;
   struct tcp_stream *a_tcp;
@@ -268,7 +268,7 @@
 
     tcp_oldest->nids_state = NIDS_TIMED_OUT;
     for (i = tcp_oldest->listeners; i; i = i->next)
-      (i->item) (tcp_oldest, &i->data);
+      (i->item) (tcp_oldest, &i->data, ts, data);
     nids_free_tcp_stream(tcp_oldest);
     nids_params.syslog(NIDS_WARN_TCP, NIDS_WARN_TCP_TOOMUCH, ugly_iphdr, this_tcphdr);
   }
@@ -303,6 +303,7 @@
   if (tcp_latest)
     tcp_latest->prev_time = a_tcp;
   tcp_latest = a_tcp;
+  return a_tcp;
 }
 
 static void
@@ -336,7 +337,7 @@
 }
 
 static void
-ride_lurkers(struct tcp_stream * a_tcp, char mask)
+ride_lurkers(struct tcp_stream * a_tcp, char mask, struct timeval * t)
 {
   struct lurker_node *i;
   char cc, sc, ccu, scu;
@@ -348,7 +349,7 @@
       ccu = a_tcp->client.collect_urg;
       scu = a_tcp->server.collect_urg;
 
-      (i->item) (a_tcp, &i->data);
+      (i->item) (a_tcp, &i->data, t);
       if (cc < a_tcp->client.collect)
 	i->whatto |= COLLECT_cc;
       if (ccu < a_tcp->client.collect_urg)
@@ -369,7 +370,7 @@
 }
 
 static void
-notify(struct tcp_stream * a_tcp, struct half_stream * rcv)
+notify(struct tcp_stream * a_tcp, struct half_stream * rcv, struct time* t)
 {
   struct lurker_node *i, **prev_addr;
   char mask;
@@ -381,7 +382,7 @@
       mask = COLLECT_ccu;
     else
       mask = COLLECT_scu;
-    ride_lurkers(a_tcp, mask);
+    ride_lurkers(a_tcp, mask, t);
     goto prune_listeners;
   }
   if (rcv->collect) {
@@ -394,7 +395,7 @@
 		a_tcp->read = rcv->count - rcv->offset;
 		  total=a_tcp->read;
   
-	    ride_lurkers(a_tcp, mask);
+	    ride_lurkers(a_tcp, mask, t);
 	    if (a_tcp->read>total-rcv->count_new)
 	    	rcv->count_new=total-a_tcp->read;
 	    
@@ -425,7 +426,7 @@
 add_from_skb(struct tcp_stream * a_tcp, struct half_stream * rcv,
 	     struct half_stream * snd,
 	     u_char *data, int datalen,
-	     u_int this_seq, char fin, char urg, u_int urg_ptr)
+	     u_int this_seq, char fin, char urg, u_int urg_ptr, struct timeval* t)
 {
   u_int lost = EXP_SEQ - this_seq;
   int to_copy, to_copy2;
@@ -441,7 +442,7 @@
     if (to_copy > 0) {
       if (rcv->collect) {
 	add2buf(rcv, data + lost, to_copy);
-	notify(a_tcp, rcv);
+	notify(a_tcp, rcv, t);
       }
       else {
 	rcv->count += to_copy;
@@ -450,14 +451,14 @@
     }
     rcv->urgdata = data[rcv->urg_ptr - this_seq];
     rcv->count_new_urg = 1;
-    notify(a_tcp, rcv);
+    notify(a_tcp, rcv, t);
     rcv->count_new_urg = 0;
     rcv->urg_count++;
     to_copy2 = this_seq + datalen - rcv->urg_ptr - 1;
     if (to_copy2 > 0) {
       if (rcv->collect) {
 	add2buf(rcv, data + lost + to_copy + 1, to_copy2);
-	notify(a_tcp, rcv);
+	notify(a_tcp, rcv, t);
       }
       else {
 	rcv->count += to_copy2;
@@ -469,7 +470,7 @@
     if (datalen - lost > 0) {
       if (rcv->collect) {
 	add2buf(rcv, data + lost, datalen - lost);
-	notify(a_tcp, rcv);
+	notify(a_tcp, rcv, t);
       }
       else {
 	rcv->count += datalen - lost;
@@ -487,7 +488,7 @@
 static void
 tcp_queue(struct tcp_stream * a_tcp, struct tcphdr * this_tcphdr,
 	  struct half_stream * snd, struct half_stream * rcv,
-	  char *data, int datalen, int skblen
+	  char *data, int datalen, int skblen, struct timeval* t
 	  )
 {
   u_int this_seq = ntohl(this_tcphdr->th_seq);
@@ -504,7 +505,7 @@
       add_from_skb(a_tcp, rcv, snd, data, datalen, this_seq,
 		   (this_tcphdr->th_flags & TH_FIN),
 		   (this_tcphdr->th_flags & TH_URG),
-		   ntohs(this_tcphdr->th_urp) + this_seq - 1);
+		   ntohs(this_tcphdr->th_urp) + this_seq - 1, t);
       /*
        * Do we have any old packets to ack that the above
        * made visible? (Go forward from skb)
@@ -518,7 +519,7 @@
 	  
 	  add_from_skb(a_tcp, rcv, snd, pakiet->data,
 		       pakiet->len, pakiet->seq, pakiet->fin, pakiet->urg,
-		       pakiet->urg_ptr + pakiet->seq - 1);
+		       pakiet->urg_ptr + pakiet->seq - 1, t);
 	  rcv->rmem_alloc -= pakiet->truesize;
 	  if (pakiet->prev)
 	    pakiet->prev->next = pakiet->next;
@@ -687,7 +688,7 @@
          a_tcp = a_tcp->next_node) {
       for (j = a_tcp->listeners; j; j = j->next) {
           a_tcp->nids_state = NIDS_EXITING;
-	  (j->item)(a_tcp, &j->data);
+	  (j->item)(a_tcp, &j->data, 0);
       }
     }
   }
@@ -699,7 +700,7 @@
 }
 
 void
-process_tcp(u_char * data, int skblen)
+process_tcp(u_char * data, int skblen, struct timeval* ts)
 {
   struct ip *this_iphdr = (struct ip *)data;
   struct tcphdr *this_tcphdr = (struct tcphdr *)(data + 4 * this_iphdr->ip_hl);
@@ -724,7 +725,7 @@
 		       this_tcphdr);
     return;
   } // ktos sie bawi
-
+  //printf("this_tcphdr->th_flags %X\n",this_tcphdr->th_flags);
   if ((this_iphdr->ip_src.s_addr | this_iphdr->ip_dst.s_addr) == 0) {
     nids_params.syslog(NIDS_WARN_TCP, NIDS_WARN_TCP_HDR, this_iphdr,
 		       this_tcphdr);
@@ -747,9 +748,24 @@
     if ((this_tcphdr->th_flags & TH_SYN) &&
 	!(this_tcphdr->th_flags & TH_ACK) &&
 	!(this_tcphdr->th_flags & TH_RST))
-      add_new_tcp(this_tcphdr, this_iphdr);
+      a_tcp = add_new_tcp(this_tcphdr, this_iphdr, ts, data);
+      if (a_tcp)
+      {
+	a_tcp->nids_state = NIDS_OPENING;
+	{
+	  //printf("a_tcp->nids_state = NIDS_OPENING\n");
+	  struct proc_node *i;
+	  for (i = tcp_procs; i; i = i->next) 
+	  {
+	    void *data;
+	    //printf("for (i = a_tcp->listeners; i; i = i->next) %X\n", i);
+	    (i->item) (a_tcp, NULL, ts, data);      
+	  }
+	}
+      }
     return;
   }
+  //printf("a_tcp->listeners %X\n",a_tcp->listeners);
   if (from_client) {
     snd = &a_tcp->client;
     rcv = &a_tcp->server;
@@ -802,7 +818,7 @@
 
       a_tcp->nids_state = NIDS_RESET;
       for (i = a_tcp->listeners; i; i = i->next)
-	(i->item) (a_tcp, &i->data);
+	(i->item) (a_tcp, &i->data, ts, data);
     }
     nids_free_tcp_stream(a_tcp);
     return;
@@ -833,7 +849,7 @@
 	    char ccu = a_tcp->client.collect_urg;
 	    char scu = a_tcp->server.collect_urg;
 	    
-	    (i->item) (a_tcp, &data);
+	    (i->item) (a_tcp, &data,  ts, data);
 	    if (cc < a_tcp->client.collect)
 	      whatto |= COLLECT_cc;
 	    if (ccu < a_tcp->client.collect_urg)
@@ -880,7 +896,7 @@
 
       a_tcp->nids_state = NIDS_CLOSE;
       for (i = a_tcp->listeners; i; i = i->next)
-	(i->item) (a_tcp, &i->data);
+	(i->item) (a_tcp, &i->data,  ts, data);
       nids_free_tcp_stream(a_tcp);
       return;
     }
@@ -888,7 +904,7 @@
   if (datalen + (this_tcphdr->th_flags & TH_FIN) > 0)
     tcp_queue(a_tcp, this_tcphdr, snd, rcv,
 	      (char *) (this_tcphdr) + 4 * this_tcphdr->th_off,
-	      datalen, skblen);
+	      datalen, skblen, ts);
   snd->window = ntohs(this_tcphdr->th_win);
   if (rcv->rmem_alloc > 65535)
     prune_queue(rcv, this_tcphdr);
@@ -966,7 +982,7 @@
 
 
 void
-process_icmp(u_char * data)
+process_icmp(u_char * data, struct timeval* ts)
 {
   struct ip *iph = (struct ip *) data;
   struct ip *orig_ip;
@@ -1024,6 +1040,6 @@
     return;
   a_tcp->nids_state = NIDS_RESET;
   for (i = a_tcp->listeners; i; i = i->next)
-    (i->item) (a_tcp, &i->data);
+    (i->item) (a_tcp, &i->data, ts, data);
   nids_free_tcp_stream(a_tcp);
 }
diff -Naur libnids-1.21/src/tcp.h libnids-1.21_patched/src/tcp.h
--- libnids-1.21/src/tcp.h	2006-05-09 13:18:23.000000000 +0200
+++ libnids-1.21_patched/src/tcp.h	2009-05-27 23:00:03.000000000 +0200
@@ -23,8 +23,8 @@
 
 int tcp_init(int);
 void tcp_exit(void);
-void process_tcp(u_char *, int);
-void process_icmp(u_char *);
+void process_tcp(u_char *, int, struct timeval* );
+void process_icmp(u_char *, struct timeval* );
 void tcp_check_timeouts(struct timeval *);
 
 #endif /* _NIDS_TCP_H */
diff -Naur libnids-1.21/src/util.c libnids-1.21_patched/src/util.c
--- libnids-1.21/src/util.c	2006-05-01 18:58:48.000000000 +0200
+++ libnids-1.21_patched/src/util.c	2009-05-27 23:00:03.000000000 +0200
@@ -9,7 +9,7 @@
 
 #include "tcp.h"
 #include "util.h"
-#include "nids.h"
+#include "nids2.h"
 
 void
 nids_no_mem(char *func)
